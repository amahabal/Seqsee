#####################################################
#
#    Package: SCF::FindIfRelated
#
# CF: FindIfRelated
#
# Options:
#
# How It Works:
#
# Thought/Codelets Scheduled:
#
#####################################################
#   
#####################################################

package SCF::FindIfRelated;
use strict;
use Carp;
use Smart::Comments;
use English qw(-no_match_vars);

use Class::Multimethods;
multimethod 'find_reln';

use base qw{};

{
    my ($logger, $is_debug, $is_info);
    BEGIN{ $logger   = Log::Log4perl->get_logger("SCF::FindIfRelated"); 
           $is_debug = $logger->is_debug();
           $is_info  = $logger->is_info();
         }
    sub LOGGING_DEBUG() { $is_debug; }
    sub LOGGING_INFO()  { $is_info;  }
}

my $logger = Log::Log4perl->get_logger("SCF::FindIfRelated"); 


# method: run
# 
#
sub run{
    my ( $action_object, $opts_ref ) = @_;
        if (LOGGING_INFO()) {
        my $msg = $action_object->generate_log_msg();

        $logger->info( $msg );
    }
    ################################
    ## Code above autogenerated.
    ## Insert Code Below
    
    my $a = $opts_ref->{a} or confess "Need a";
    my $b = $opts_ref->{b} or confess "Need b";

    my $reln;
    eval {$reln = find_reln($a, $b)};
    
    if ($EVAL_ERROR) {
        my $e = $EVAL_ERROR;
        if (UNIVERSAL::isa($e, 'SErr::NeedMoreData')) {
            my $payload = $e->payload(); #can be codelet or thought
            $payload->schedule();
            return;
        } else {
            die $e;
        }
    }

    # So a relation has been found
    # XXX need to add reln to the objects
    SThought->create( $reln )->schedule();

}
1;
