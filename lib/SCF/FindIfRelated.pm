#####################################################
#
#    Package: SCF::FindIfRelated
#
# CF: FindIfRelated
#
# Options:
#
# How It Works:
#
# Thought/Codelets Scheduled:
#
#####################################################
#   
#####################################################

package SCF::FindIfRelated;
use strict;
use Carp;
use Smart::Comments;
use English qw(-no_match_vars);
use SCF;

use Class::Multimethods;
multimethod 'find_reln';

use base qw{};

{
    my ($logger, $is_debug, $is_info);
    BEGIN{ $logger   = Log::Log4perl->get_logger("SCF::FindIfRelated"); 
           $is_debug = $logger->is_debug();
           $is_info  = $logger->is_info();
         }
    sub LOGGING_DEBUG() { $is_debug; }
    sub LOGGING_INFO()  { $is_info;  }
}

my $logger = Log::Log4perl->get_logger("SCF::FindIfRelated"); 


# method: run
# 
#
sub run{
    my ( $action_object, $opts_ref ) = @_;
        if (LOGGING_INFO()) {
        my $msg = $action_object->generate_log_msg();

        $logger->info( $msg );
    }
    ################################
    ## Code above autogenerated.
    ## Insert Code Below
    
    my $a = $opts_ref->{a} or confess "Need a";
    my $b = $opts_ref->{b} or confess "Need b";

    if ($a->spans($b) or $b->spans($a)) {
        return;
    }

    my $reln;
    if ($reln = $a->get_relation($b)) {
        # No need to create another.
        # But you may care to think about it some more
        ContinueWith(SThought->create($reln));
    }

    ## Running FindIfRelated: $a, $b
    $reln = find_reln( $a, $b );
    return unless $reln;

    # So a relation has been found
    $reln->insert;
    ContinueWith(SThought->create($reln));
}
1;
