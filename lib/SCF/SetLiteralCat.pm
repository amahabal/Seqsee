#####################################################
#
#    Package: SCF::SetLiteralCat
#
# CF: SetLiteralCat
#
# Options:
#
# How It Works:
#
# Thought/Codelets Scheduled:
#
#####################################################
#   
#####################################################

package SCF::SetLiteralCat;
use strict;
use Carp;
use Smart::Comments;
use English qw(-no_match_vars);

use Class::Multimethods;

use base qw{};

{
    my ($logger, $is_debug, $is_info);
    BEGIN{ $logger   = Log::Log4perl->get_logger("SCF::SetLiteralCat"); 
           $is_debug = $logger->is_debug();
           $is_info  = $logger->is_info();
         }
    sub LOGGING_DEBUG() { $is_debug; }
    sub LOGGING_INFO()  { $is_info;  }
}

my $logger = Log::Log4perl->get_logger("SCF::SetLiteralCat"); 


# method: run
# 
#
sub run{
    my ( $action_object, $opts_ref ) = @_;
        if (LOGGING_INFO()) {
        my $msg = $action_object->generate_log_msg();

        $logger->info( $msg );
    }
    ################################
    ## Code above autogenerated.
    ## Insert Code Below

    my $object = $opts_ref->{object} or confess "Need object";
    my @structure;
    if ($object->get_metonym_activeness) {
        @structure = $object->get_metonym()->get_starred->get_structure();
    } else {
        @structure = 
            map { $_->get_structure }
                map { $_->get_effective_object } 
                    @{$object->get_parts_ref};
        ## @structure
    }
    
    my $lit_cat = $S::LITERAL->build({ structure => [@structure] });
    ## $lit_cat, ident $lit_cat
    my $bindings = $object->describe_as( $lit_cat );
    ## $bindings
    unless ($bindings) {
        confess "Hey, should NEVER have failed!";
    }
}
1;
